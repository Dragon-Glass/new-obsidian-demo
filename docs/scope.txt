// Backend
// Server
// GraphQL Schema (Start with basic queries ---> Add mutations)

// Database
// Which database?
/*
- Use a local JSON object
  - wont see the actual network speed with this, but we could introduce a delay
  - would need to create our own functionality for getting data (there is
       potentially libray that can do this for us, although may not be in
       Deno, called lowDB)
- Host / Setup local instance of Mongo or Postgres DB (deno packages:
    mongo, postgres)
*/
// ERD
// Schema - Tables, Fields
/*
  Actors
  id
  firstName
  lastName
  nickname
  films (Foreign Key)
*/
/*
  Films
  id
  title
  release_year
  genre
  actors (Foreign Key)
*/

// Server:
// Query Ops
// Get Actors
//   Get Films by Actor
// Get Films
//  Get Actors by Film
// Get Films by Genre
// Get Films by Release Year (Order, Asc, Desc)

// Mutation Ops (CRUD)
// Actors
// Add actor
// Delete actor
// Add movie
// Delete movie
// Associate actors - movies (Update)
//  On create vs. update
// Update nickname

// Front End - "Should be easy" - Esma
/*
----------------------------------------------------
--Last Query, Response Object, Cache, Request Time--
----------------------------------------------------
--------Working CRUD App Below - Tile Format--------
View ||| Tiles 
----------------------------------------------------

Within Views we have various queries:
Query Options
All Actors
All Movies
All Movies of X type
Movies Ordered by Release Data

Mutation Options
Add Actor
Add Movie
Delete Movie
Update nickname
Delete an actor
*/

// Rick and Morty / Star Wars Esque
// Get Items
// Add Items
// Delete Items
// Update Info

// Way to showcase cache vs. network request
// Cache structure
// Time of Request


